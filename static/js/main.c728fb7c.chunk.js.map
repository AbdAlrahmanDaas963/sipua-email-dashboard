{"version":3,"sources":["components/Ready.jsx","App.js","reportWebVitals.js","index.js"],"names":["Ready","useState","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","DB","getFirestore","getter","collection","a","docRef","doc","getDoc","exists","console","log","info","setInfo","setLoading","useEffect","setTimeout","window","addEventListener","Fetchdata","getDocs","forEach","id","data","handler","obj","push","length","className","role","map","email","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA6FeA,MA9Ef,WACE,MAAoCC,mBAAS,IAA7C,mBAWMC,GAXN,UAWYC,YATW,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBAGXC,EAAKC,YAAaV,GAGlBW,GAFcC,YAAWH,EAAI,UAEvB,uCAAG,4BAAAI,EAAA,6DACPC,EAASC,YAAIN,EAAI,SAAU,gCADpB,SAESO,YAAOF,GAFhB,cAKDG,UAIVC,QAAQC,IAAI,qBATD,2CAAH,sDAYZR,IAEA,MAAwBZ,mBAAS,IAAjC,mBAAOqB,EAAP,KAAaC,EAAb,KACA,EAA8BtB,oBAAS,GAAvC,mBAAgBuB,GAAhB,WAEAC,qBAAU,WACRC,YAAW,WACTF,GAAW,KACV,OACF,IAGHG,OAAOC,iBAAiB,QAAQ,WAC9BC,OAIF,IAAMA,EAAS,uCAAG,sBAAAd,EAAA,sEACYe,YAAQhB,YAAWH,EAAI,WADnC,cAIFoB,SAAQ,SAACd,GACrBG,QAAQC,IAAIJ,EAAIe,GAAI,OAAQf,EAAIgB,QAEhC,IAAIC,EAAUZ,EACVa,EAAM,CAAEH,GAAIf,EAAIe,GAAIC,KAAMhB,EAAIgB,QAClCC,EAAQE,KAAKD,GAEbZ,EAAQW,MAEVd,QAAQC,IAAI,OAAQC,EAAK,IAbT,2CAAH,qDAgBf,OACE,mCACmB,IAAhBA,EAAKe,OACJ,qBAAKC,UAAU,2BAA2BC,KAAK,WAE/C,oBAAID,UAAU,aAAd,SACGhB,EAAKkB,KAAI,SAACC,GAAD,OACR,oBAAmBH,UAAU,uCAA7B,SACGG,EAAMT,IADAS,EAAMT,YCzEZU,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCOSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c728fb7c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  doc,\r\n  setDoc,\r\n  getDoc,\r\n  getDocs,\r\n  serverTimestamp,\r\n} from \"firebase/firestore\";\r\nimport { firebase } from \"firebase/app\";\r\nimport \"firebase/compat/firestore\";\r\nimport { db } from \"firebase/database/dist\";\r\n\r\nfunction Ready() {\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyAd69gUQxo2X73T4zIOhbLCEf4KpDZECQE\",\r\n    authDomain: \"testemails-b7425.firebaseapp.com\",\r\n    projectId: \"testemails-b7425\",\r\n    storageBucket: \"testemails-b7425.appspot.com\",\r\n    messagingSenderId: \"175454053843\",\r\n    appId: \"1:175454053843:web:01660c8f0d47bc250ebb26\",\r\n    measurementId: \"G-0LHJSX9B7N\",\r\n  };\r\n  const app = initializeApp(firebaseConfig);\r\n  const DB = getFirestore(app);\r\n  const messagesRef = collection(DB, \"emails\");\r\n\r\n  const getter = async () => {\r\n    const docRef = doc(DB, \"emails\", \"abdalrahmandaas963@gmail.com\");\r\n    const docSnap = await getDoc(docRef);\r\n    // console.log(\"docSnap\", docSnap);\r\n\r\n    if (docSnap.exists()) {\r\n      // console.log(\"Document data:\", docSnap.data());\r\n    } else {\r\n      // doc.data() will be undefined in this case\r\n      console.log(\"No such document!\");\r\n    }\r\n  };\r\n  getter();\r\n\r\n  const [info, setInfo] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  }, []);\r\n  // Start the fetch operation as soon as\r\n  // the page loads\r\n  window.addEventListener(\"load\", () => {\r\n    Fetchdata();\r\n  });\r\n\r\n  // Fetch the required data using the get() method\r\n  const Fetchdata = async () => {\r\n    const querySnapshot = await getDocs(collection(DB, \"emails\"));\r\n    // setInfo(querySnapshot);\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      console.log(doc.id, \" => \", doc.data());\r\n\r\n      let handler = info;\r\n      let obj = { id: doc.id, data: doc.data() };\r\n      handler.push(obj);\r\n\r\n      setInfo(handler);\r\n    });\r\n    console.log(\"info\", info[2]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {info.length === 0 ? (\r\n        <div className=\"spinner-border text-info\" role=\"status\"></div>\r\n      ) : (\r\n        <ul className=\"list-group\">\r\n          {info.map((email) => (\r\n            <li key={email.id} className=\"list-group-item list-group-item-info\">\r\n              {email.id}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Ready;\r\n","import Ready from \"./components/Ready\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ready />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}